Index: host-binutils-2.28.1-p/bfd/bfd-in2.h
===================================================================
--- host-binutils-2.28.1-p.orig/bfd/bfd-in2.h	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/bfd/bfd-in2.h	2018-01-12 10:42:03.249144283 +0800
@@ -2014,11 +2014,17 @@
 #define bfd_mach_mips4100              4100
 #define bfd_mach_mips4111              4111
 #define bfd_mach_mips4120              4120
+#define bfd_mach_mips4180              4180
+#define bfd_mach_mips4181              4181
+#define bfd_mach_mips4281              4281
 #define bfd_mach_mips4300              4300
 #define bfd_mach_mips4400              4400
 #define bfd_mach_mips4600              4600
 #define bfd_mach_mips4650              4650
 #define bfd_mach_mips5000              5000
+#define bfd_mach_mips5181              5181
+#define bfd_mach_mips5280              5280
+#define bfd_mach_mips5281              5281
 #define bfd_mach_mips5400              5400
 #define bfd_mach_mips5500              5500
 #define bfd_mach_mips5900              5900
@@ -2468,7 +2474,8 @@
      generated only when linking i960 coff files with i960 b.out
      symbols.  If this type is returned, the error_message argument
      to bfd_perform_relocation will be set.  */
-  bfd_reloc_dangerous
+  bfd_reloc_dangerous,
+  bfd_reloc_notmultipleof8_ltw
  }
  bfd_reloc_status_type;
 
@@ -5782,6 +5789,7 @@
 /* This is used to tell the dynamic linker to copy the value out of
 the dynamic object into the runtime process image.  */
   BFD_RELOC_MICROBLAZE_COPY,
+  BFD_RELOC_OFF6A,
 
 /* Unused Reloc  */
   BFD_RELOC_MICROBLAZE_64_TLS,
Index: host-binutils-2.28.1-p/bfd/cpu-mips.c
===================================================================
--- host-binutils-2.28.1-p.orig/bfd/cpu-mips.c	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/bfd/cpu-mips.c	2018-01-12 10:42:03.249144283 +0800
@@ -67,11 +67,17 @@
   I_mips4100,
   I_mips4111,
   I_mips4120,
+  I_mips4180,
+  I_mips4181,
+  I_mips4281,
   I_mips4300,
   I_mips4400,
   I_mips4600,
   I_mips4650,
   I_mips5000,
+  I_mips5181,
+  I_mips5280,
+  I_mips5281,
   I_mips5400,
   I_mips5500,
   I_mips5900,
@@ -118,11 +124,17 @@
   N (64, 64, bfd_mach_mips4100, "mips:4100",      FALSE, NN(I_mips4100)),
   N (64, 64, bfd_mach_mips4111, "mips:4111",      FALSE, NN(I_mips4111)),
   N (64, 64, bfd_mach_mips4120, "mips:4120",      FALSE, NN(I_mips4120)),
+  N (32, 32, bfd_mach_mips4180, "mips:4180",      FALSE, NN(I_mips4180)),
+  N (32, 32, bfd_mach_mips4181, "mips:4181",      FALSE, NN(I_mips4181)),
+  N (32, 32, bfd_mach_mips4281, "mips:4281",      FALSE, NN(I_mips4281)),
   N (64, 64, bfd_mach_mips4300, "mips:4300",      FALSE, NN(I_mips4300)),
   N (64, 64, bfd_mach_mips4400, "mips:4400",      FALSE, NN(I_mips4400)),
   N (64, 64, bfd_mach_mips4600, "mips:4600",      FALSE, NN(I_mips4600)),
   N (64, 64, bfd_mach_mips4650, "mips:4650",      FALSE, NN(I_mips4650)),
   N (64, 64, bfd_mach_mips5000, "mips:5000",      FALSE, NN(I_mips5000)),
+  N (32, 32, bfd_mach_mips5181, "mips:5181",      FALSE, NN(I_mips5181)),
+  N (32, 32, bfd_mach_mips5280, "mips:5280",      FALSE, NN(I_mips5280)),
+  N (32, 32, bfd_mach_mips5281, "mips:5281",      FALSE, NN(I_mips5281)),
   N (64, 64, bfd_mach_mips5400, "mips:5400",      FALSE, NN(I_mips5400)),
   N (64, 64, bfd_mach_mips5500, "mips:5500",      FALSE, NN(I_mips5500)),
   N (64, 32, bfd_mach_mips5900, "mips:5900",      FALSE, NN(I_mips5900)),
Index: host-binutils-2.28.1-p/bfd/elf32-mips.c
===================================================================
--- host-binutils-2.28.1-p.orig/bfd/elf32-mips.c	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/bfd/elf32-mips.c	2018-01-12 10:42:03.249144283 +0800
@@ -809,6 +809,21 @@
 	 0x0000ffff,		/* src_mask */
 	 0x0000ffff,		/* dst_mask */
 	 TRUE),			/* pcrel_offset */
+
+  /* relocation added by dbb */
+  HOWTO (R_RELOC_OFF6A,         /* type */
+	 3,                     /* rightshift */
+	 2,                     /* size (0 = byte, 1 = short, 2 = long) */
+	 10,                    /* bitsize */
+	 FALSE,                 /* pc_relative */
+	 6,                     /* bitpos */
+	 complain_overflow_dont, /* complain_on_overflow */
+	 NULL,                  /* special_function */
+	 "R_RELOC_OFF6A",       /* name */
+	 TRUE,                  /* partial_inplace */
+	 0x0000FFC0,            /* src_mask */
+	 0x0000FFC0,            /* dst_mask */
+	 FALSE),                /* pcrel_offset */
 };
 
 /* The reloc used for BFD_RELOC_CTOR when doing a 64 bit link.  This
@@ -2014,6 +2029,7 @@
   { BFD_RELOC_MIPS_TLS_TPREL64, R_MIPS_TLS_TPREL64 },
   { BFD_RELOC_MIPS_TLS_TPREL_HI16, R_MIPS_TLS_TPREL_HI16 },
   { BFD_RELOC_MIPS_TLS_TPREL_LO16, R_MIPS_TLS_TPREL_LO16 },
+  { BFD_RELOC_OFF6A, R_RELOC_OFF6A },
   { BFD_RELOC_MIPS_21_PCREL_S2, R_MIPS_PC21_S2 },
   { BFD_RELOC_MIPS_26_PCREL_S2, R_MIPS_PC26_S2 },
   { BFD_RELOC_MIPS_18_PCREL_S3, R_MIPS_PC18_S3 },
Index: host-binutils-2.28.1-p/bfd/elfxx-mips.c
===================================================================
--- host-binutils-2.28.1-p.orig/bfd/elfxx-mips.c	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/bfd/elfxx-mips.c	2018-01-12 10:42:03.253144126 +0800
@@ -5964,6 +5964,13 @@
 	     not check for overflow here.  */
 	}
       break;
+ 
+    case R_RELOC_OFF6A:
+      value = (symbol + ((addend >> 6) << 3));
+      if ((value % 8) != 0)
+        return bfd_reloc_notmultipleof8_ltw;
+      value = ((value >> 3) << 6) & howto->dst_mask;
+      break;
 
     case R_MIPS_LITERAL:
     case R_MICROMIPS_LITERAL:
@@ -10437,6 +10444,12 @@
 		 input_bfd, input_section, rel->r_offset);
 	    }
 	  break;
+ 
+  case bfd_reloc_notmultipleof8_ltw:
+    msg = _("offset in ltw instruction is not multiple of 8");
+    info->callbacks->warning
+      (info, msg, name, input_bfd, input_section, rel->r_offset);
+   return FALSE;
 
 	case bfd_reloc_ok:
 	  break;
Index: host-binutils-2.28.1-p/bfd/libbfd.h
===================================================================
--- host-binutils-2.28.1-p.orig/bfd/libbfd.h	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/bfd/libbfd.h	2018-01-12 10:42:03.257143968 +0800
@@ -2836,6 +2836,7 @@
   "BFD_RELOC_MICROBLAZE_64_GOTOFF",
   "BFD_RELOC_MICROBLAZE_32_GOTOFF",
   "BFD_RELOC_MICROBLAZE_COPY",
+  "BFD_RELOC_OFF6A",
   "BFD_RELOC_MICROBLAZE_64_TLS",
   "BFD_RELOC_MICROBLAZE_64_TLSGD",
   "BFD_RELOC_MICROBLAZE_64_TLSLD",
Index: host-binutils-2.28.1-p/bfd/reloc.c
===================================================================
--- host-binutils-2.28.1-p.orig/bfd/reloc.c	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/bfd/reloc.c	2018-01-12 10:42:03.257143968 +0800
@@ -50,6 +50,7 @@
 #include "bfd.h"
 #include "bfdlink.h"
 #include "libbfd.h"
+#include "elf/mips.h"
 /*
 DOCDD
 INODE
@@ -1222,6 +1223,14 @@
      }
      */
 
+  switch (howto->type)
+    {
+    case R_RELOC_OFF6A:
+      if ((relocation % 8) != 0)
+        return bfd_reloc_notmultipleof8_ltw;
+      break;
+    }
+
   relocation >>= (bfd_vma) howto->rightshift;
 
   /* Shift everything up to where it's going to be used.  */
Index: host-binutils-2.28.1-p/gas/config/tc-mips.c
===================================================================
--- host-binutils-2.28.1-p.orig/gas/config/tc-mips.c	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/gas/config/tc-mips.c	2018-01-12 12:34:48.774043396 +0800
@@ -103,6 +103,31 @@
 #define SP  29
 #define FP  30
 #define RA  31
+#define M0L      1
+#define M0H      2
+#define M0       3
+#define M1L      5
+#define M1H      6
+#define M1       7
+#define M2L      9
+#define M2H     10
+#define M2      11
+#define M3L     13
+#define M3H     14
+#define M3      15
+#define ESTATUS  0
+#define ECAUSE   1
+#define INTVEC   2
+#define CBS0     0
+#define CBS1     1
+#define CBS2     2
+#define CBE0     4
+#define CBE1     5
+#define CBE2     6
+#define LPS0    16
+#define LPE0    17
+#define LPC0    18
+#define MMD     24
 
 #define ILLEGAL_REG (32)
 
@@ -300,6 +325,8 @@
 /* Which bits of file_ase were explicitly set or cleared by ASE options.  */
 static unsigned int file_ase_explicit;
 
+static const struct mips_opcode dummy_opcode = { NULL, NULL, 0, 0, 0, 0, 0 };
+
 /* These variables are filled in with the masks of registers used.
    The object format code reads them and puts them in the appropriate
    place.  */
@@ -562,9 +589,8 @@
 #define gpr_interlocks                                \
   (mips_opts.isa != ISA_MIPS1                         \
    || mips_opts.arch == CPU_R3900                     \
-   || mips_opts.arch == CPU_R5900                     \
    || mips_opts.micromips                             \
-   )
+  )
 
 /* Whether the processor uses hardware interlocks to avoid delays
    required by coprocessor instructions, and thus does not require
@@ -1360,6 +1386,10 @@
 static void s_mips_loc (int);
 static bfd_boolean pic_need_relax (symbolS *);
 static int relaxed_branch_length (fragS *, asection *, int);
+//static inline int rlx_nops_for_new_insn (const struct mips_cl_insn *, const struct mips_cl_insn *);
+//static inline int rlx_is_insn_lt (const struct mips_cl_insn *, const struct mips_cl_insn *);
+//static inline int rlx_is_insn_st (const struct mips_cl_insn *, const struct mips_cl_insn *);
+//static inline int rlx_is_insn_swappable (const struct mips_cl_insn *, const struct mips_cl_insn *);
 static int relaxed_micromips_16bit_branch_length (fragS *, asection *, int);
 static int relaxed_micromips_32bit_branch_length (fragS *, asection *, int);
 static void file_mips_check_options (void);
@@ -2684,6 +2714,33 @@
 #define MIPS16_SPECIAL_REGISTER_NAMES \
     {"$pc",	RTYPE_PC | 0}
 
+#define RLX_REGISTER_ALIAS_NAMES \
+    {"$m0l", RTYPE_GP | 1},      \
+    {"$m0h", RTYPE_GP | 2},      \
+    {"$m0",  RTYPE_GP | 3},      \
+    {"$m1l", RTYPE_GP | 5},      \
+    {"$m1h", RTYPE_GP | 6},      \
+    {"$m1",  RTYPE_GP | 7},      \
+    {"$m2l", RTYPE_GP | 9},      \
+    {"$m2h", RTYPE_GP | 10},     \
+    {"$m2",  RTYPE_GP | 11},     \
+    {"$m3l", RTYPE_GP | 13},     \
+    {"$m3l", RTYPE_GP | 14},     \
+    {"$m3",  RTYPE_GP | 15},     \
+    {"$estatus", RTYPE_GP | 0},  \
+    {"$ecause",  RTYPE_GP | 1},  \
+    {"$intvec",  RTYPE_GP | 2},  \
+    {"$mmd", RTYPE_GP | 24},     \
+    {"$cbs0",  RTYPE_GP | 0},    \
+    {"$cbs1",  RTYPE_GP | 1},    \
+    {"$cbs2",  RTYPE_GP | 2},    \
+    {"$cbe0",  RTYPE_GP | 4},    \
+    {"$cbe1",  RTYPE_GP | 5},    \
+    {"$cbe2",  RTYPE_GP | 6},    \
+    {"$lps0",  RTYPE_GP | 16},   \
+    {"$lpe0",  RTYPE_GP | 17},   \
+    {"$lpc0",  RTYPE_GP | 18}
+
 #define MDMX_VECTOR_REGISTER_NAMES \
     /* {"$v0",	RTYPE_VEC | 0},  clash with REG 2 above */ \
     /* {"$v1",	RTYPE_VEC | 1},  clash with REG 3 above */ \
@@ -2749,6 +2806,7 @@
   SYMBOLIC_REGISTER_NAMES,
 
   MIPS16_SPECIAL_REGISTER_NAMES,
+  RLX_REGISTER_ALIAS_NAMES,
   MDMX_VECTOR_REGISTER_NAMES,
   R5900_I_NAMES,
   R5900_Q_NAMES,
@@ -6124,6 +6182,70 @@
 #define INSN_DMULT	0x1c
 #define INSN_DMULTU	0x1d
 
+/*
+static inline int
+rlx_is_insn_lt (const struct mips_cl_insn *insn1,
+                const struct mips_cl_insn *insn2)
+{
+  int is_lt = 0;
+  unsigned int mask = 0;
+
+  if (insn1 == NULL || insn2 == NULL)
+    return 0;
+
+  if (strncmp (insn1->insn_mo->name, "lt", 2) == 0)
+    is_lt = 1;
+  else if (strncmp (insn1->insn_mo->name, "ltw", 3) == 0)
+    is_lt = 1;
+
+  if (is_lt == 0)
+    return 0;
+
+  int regno1 = EXTRACT_OPERAND (0, RT, *insn1);
+  int regno2 = regno1 + 1;
+
+  mask = 
+
+  if (insn_uses_reg (insn2, regno1, MIPS_GR_REG) ||
+      insn_uses_reg (insn2, regno2, MIPS_GR_REG))
+    return 1;
+
+  return 0;
+}
+
+static inline int
+rlx_is_insn_st (const struct mips_cl_insn *insn1,
+                const struct mips_cl_insn *insn2)
+{
+  int is_st = 0;
+
+  if (insn1 == NULL || insn2 == NULL)
+    return 0;
+
+  if (strncmp (insn2->insn_mo->name, "st", 2) == 0)
+    is_st = 1;
+
+  if (is_st == 0)
+    return 0;
+
+  int regno1 = EXTRACT_OPERAND (0, RT, *insn1);
+  int regno2 = 0;
+
+  if (regno1 % 2 == 0)
+    regno2 = regno1 + 1;
+  else
+    regno2 = regno1 - 1;
+
+  gpr_write_mask()
+
+  if (insn_uses_reg (insn2, regno1, MIPS_GR_REG) ||
+      insn_uses_reg (insn2, regno2, MIPS_GR_REG))
+    return 1;
+
+  return 0;
+}
+*/
+
 /* Return the number of instructions that must separate INSN1 and INSN2,
    where INSN1 is the earlier instruction.  Return the worst-case value
    for any INSN2 if INSN2 is null.  */
@@ -6212,6 +6334,8 @@
 	{
 	  if (insn2 == NULL || (gpr_read_mask (insn2) & gpr_write_mask (insn1)))
 	    return 1;
+    // if (rlx_is_insn_lt (insn1, insn2) || rlx_is_insn_st (insn1, insn2))
+    //   return 1;
 	}
 
       /* Check for generic coprocessor hazards.
@@ -6541,6 +6665,35 @@
   return nops;
 }
 
+/* 2006-01-09 tonywu: fix branch delay slot filling bug */
+/*static inline int
+rlx_is_insn_swappable (const struct mips_cl_insn *history,
+                       const struct mips_cl_insn *insn)
+{
+
+  unsigned long pinfo1, pinfo2;
+
+  pinfo1 = history[0].insn_mo->pinfo;
+  pinfo2 = history[1].insn_mo->pinfo;
+
+  if (pinfo1 & INSN_LOAD_MEMORY || pinfo1 & INSN_WRITE_2)
+    {
+      if (insn_uses_reg (insn, EXTRACT_OPERAND (RT, history[0]), MIPS_GR_REG))
+        {
+          return 1;
+        }
+    }
+
+  if (pinfo2 & INSN_LOAD_MEMORY || pinfo1 & INSN_WRITE_2)
+    {
+      if (insn_uses_reg (insn, EXTRACT_OPERAND (RT, history[1]), MIPS_GR_REG))
+        {
+          return 1;
+        }
+    }
+  return 0;
+}*/
+
 /* The variable arguments provide NUM_INSNS extra instructions that
    might be added to HIST.  Return the largest number of nops that
    would be needed after the extended sequence, ignoring hazards
@@ -19277,6 +19430,12 @@
   { "r3000",          0, 0,			ISA_MIPS1,    CPU_R3000 },
   { "r2000",          0, 0,			ISA_MIPS1,    CPU_R3000 },
   { "r3900",          0, 0,			ISA_MIPS1,    CPU_R3900 },
+  { "lx4180",         0, 0,     ISA_MIPS1,    CPU_LX4180 },
+  { "rlx4181",        0, 0,     ISA_MIPS1,    CPU_RLX4181},
+  { "rlx4281",        0, 0,     ISA_MIPS1,    CPU_RLX4281},
+  { "rlx5181",        0, 0,     ISA_MIPS1,    CPU_RLX5181},
+  { "lx5280",         0, 0,     ISA_MIPS1,    CPU_LX5280 },
+  { "rlx5281",        0, 0,     ISA_MIPS1,    CPU_RLX5281},
 
   /* MIPS II */
   { "r6000",          0, 0,			ISA_MIPS2,    CPU_R6000 },
Index: host-binutils-2.28.1-p/gas/write.c
===================================================================
--- host-binutils-2.28.1-p.orig/gas/write.c	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/gas/write.c	2018-01-12 10:42:03.265143654 +0800
@@ -1165,6 +1165,9 @@
     case bfd_reloc_outofrange:
       as_bad_where (file, line, _("relocation out of range"));
       break;
+    case bfd_reloc_notmultipleof8_ltw:
+      as_bad_where (file, line, _("offset in ltw instruction is not multiple of 8"));
+      break;
     default:
       as_fatal (_("%s:%u: bad return from bfd_install_relocation: %x"),
 		file, line, s);
Index: host-binutils-2.28.1-p/include/elf/mips.h
===================================================================
--- host-binutils-2.28.1-p.orig/include/elf/mips.h	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/include/elf/mips.h	2018-01-12 10:42:03.265143654 +0800
@@ -98,7 +98,8 @@
   RELOC_NUMBER (R_MIPS_PC19_S2, 63)
   RELOC_NUMBER (R_MIPS_PCHI16, 64)
   RELOC_NUMBER (R_MIPS_PCLO16, 65)
-  FAKE_RELOC (R_MIPS_max, 66)
+  RELOC_NUMBER (R_RELOC_OFF6A, 66)
+  FAKE_RELOC (R_MIPS_max, 67)
   /* These relocs are used for the mips16.  */
   FAKE_RELOC (R_MIPS16_min, 100)
   RELOC_NUMBER (R_MIPS16_26, 100)
Index: host-binutils-2.28.1-p/include/opcode/mips.h
===================================================================
--- host-binutils-2.28.1-p.orig/include/opcode/mips.h	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/include/opcode/mips.h	2018-01-12 10:42:03.265143654 +0800
@@ -63,6 +63,22 @@
 
    The general coprocessor instructions use COPZ.  */
 
+#define OP_MASK_IMMIDATE74 0xf   /* used in MFA,MFA2,RNDA2 */
+#define OP_SH_IMMIDATE74 7       /* used in MFA,MFA2,RNDA2 */
+#define OP_MASK_IMMIDATE6b 0x7ff /* used in lt,st */
+#define OP_SH_IMMIDATE6b 6       /* used in lt,st */
+#define OP_MASK_IMMIDATE88 0xff  /* used in lbp,stp,etc */
+#define OP_SH_IMMIDATE88 8       /* used in lbp,stp,etc */
+#define OP_MASK_EVENREG    0x1f  /* used in lt,st,ltp,stp */
+#define OP_SH_EVENREG    16      /* used in lt,st,ltp,stp */
+#define OP_MASK_OFFSET6A 0x3ff   /* used in ltw */
+#define OP_SH_OFFSET6A   6       /* used in ltw */
+
+#define OP_MASK_RLX_SEL    0x3f
+#define OP_SH_RLX_SEL    0
+#define OP_MASK_RLX_STYPE  0x3f
+#define OP_SH_RLX_STYPE    6
+
 #define OP_MASK_OP		0x3f
 #define OP_SH_OP		26
 #define OP_MASK_RS		0x1f
@@ -781,6 +797,15 @@
    "i" 16 bit unsigned immediate (OP_*_IMMEDIATE)
    "j" 16 bit signed immediate (OP_*_DELTA)
    "k" 5 bit cache opcode in target register position (OP_*_CACHE)
+
+*********************** dbb  modified for supporting radiax instructions **************************
+   "@" 11 bits immediate used in lt,st (OP_*_IMMIDATE6b),in fact it is 14 bits,mutiple of 8;
+   "#" 4 bits immediate from 0 to 8,used in MFA,MFA2,RNDA2 (OP_*_IMMIDATE74)
+   "~" 8 bits immediate ,used in lbp,stp,etc(OP_*_IMMIDATE88)
+   "`"  even register,used in lt,st,ltp,stp (OP_*_EVENREG)
+   "-"  10 bits offset,used in ltw(OP_*_OFFSET6A)
+*********************** dbb  modified for supporting radiax instructions **************************
+
    "o" 16 bit signed offset (OP_*_DELTA)
    "p" 16 bit PC relative branch target address (OP_*_DELTA)
    "q" 10 bit extra breakpoint code (OP_*_CODE2)
@@ -1233,6 +1258,8 @@
 #define INSN_4111                 0x00400000
 /* NEC VR4120 instruction.  */
 #define INSN_4120                 0x00800000
+
+#if 0 //JMM - break all these badly sorry!
 /* NEC VR5400 instruction.  */
 #define INSN_5400		  0x01000000
 /* NEC VR5500 instruction.  */
@@ -1242,6 +1269,34 @@
 #define INSN_LOONGSON_2E          0x40000000
 /* ST Microelectronics Loongson 2F.  */
 #define INSN_LOONGSON_2F          0x80000000
+#else
+
+#define INSN_4180                 0x01000000
+#define INSN_4181                 0x02000000
+#define INSN_4281                 0x04000000
+#define INSN_5181                 0x08000000
+#define INSN_5280                 0x10000000
+#define INSN_5281                 0x20000000
+
+#define INSN_DONT_CARE            0x80000000
+/* NEC VR5400 instruction.  */
+#define INSN_5400                 INSN_DONT_CARE
+/* NEC VR5500 instruction.  */
+#define INSN_5500                 INSN_DONT_CARE
+/* MDMX ASE */
+#define INSN_MDMX                 INSN_DONT_CARE
+/* MT ASE */
+#define INSN_MT                   INSN_DONT_CARE
+/* SmartMIPS ASE  */
+#define INSN_SMARTMIPS            INSN_DONT_CARE
+/* DSP R2 ASE  */
+#define INSN_DSPR2                INSN_DONT_CARE
+/* ST Microelectronics Loongson 2E.  */
+#define INSN_LOONGSON_2E          INSN_DONT_CARE
+/* ST Microelectronics Loongson 2F.  */
+#define INSN_LOONGSON_2F          INSN_DONT_CARE
+#endif
+
 /* Loongson 3A.  */
 #define INSN_LOONGSON_3A          0x00000400
 /* RMI Xlr instruction */
@@ -1307,11 +1362,17 @@
 #define CPU_VR4100	4100
 #define CPU_R4111	4111
 #define CPU_VR4120	4120
+#define CPU_LX4180      4180    /*  LX4180 */
+#define CPU_RLX4181     4181    /* RLX4181 */
+#define CPU_RLX4281     4281    /* RLX4281 */
 #define CPU_R4300	4300
 #define CPU_R4400	4400
 #define CPU_R4600	4600
 #define CPU_R4650	4650
 #define CPU_R5000	5000
+#define CPU_RLX5181     5181    /* RLX5181 */
+#define CPU_RLX5281     5281    /* RLX5281 */
+#define CPU_LX5280      5280    /*  LX5280 */
 #define CPU_VR5400	5400
 #define CPU_VR5500	5500
 #define CPU_R5900	5900
@@ -1414,6 +1475,24 @@
     case CPU_XLR:
       return (mask & INSN_XLR) != 0;
 
+    case CPU_LX4180:
+      return (mask & INSN_4180) != 0;
+
+    case CPU_RLX4181:
+      return (mask & INSN_4181) != 0;
+
+    case CPU_RLX4281:
+      return (mask & INSN_4281) != 0;
+
+    case CPU_RLX5181:
+      return (mask & INSN_5181) != 0;
+
+    case CPU_LX5280:
+      return (mask & INSN_5280) != 0;
+
+    case CPU_RLX5281:
+      return (mask & INSN_5281) != 0;
+
     case CPU_MIPS32R6:
       return (mask & INSN_ISA_MASK) == INSN_ISA32R6;
 
Index: host-binutils-2.28.1-p/opcodes/mips-dis.c
===================================================================
--- host-binutils-2.28.1-p.orig/opcodes/mips-dis.c	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/opcodes/mips-dis.c	2018-01-12 10:42:03.265143654 +0800
@@ -30,6 +30,27 @@
    symbol table is available when this code runs out in an embedded
    system as when it is used for disassembler support in a monitor.  */
 
+int is_rlx_insn = 0;
+int des_reg_type = 0;
+/* the des reg is:
+ * 0 gr,
+ * 1 accumulator,
+ * 2 Radiax User register,
+ * 3 Selects Lexra Coprocessor0 register
+ */
+int src_reg_type = 0;
+/* the src reg is:
+ * 0 gr,
+ * 1 accumulator,
+ * 2 Radiax User register
+ */
+int targ_reg_type = 0;
+/* the target reg is:
+ * 0 gr,
+ * 1 accumulator,
+ * 2 Radiax User register
+ */
+
 #if !defined(EMBEDDED_ENV)
 #define SYMTAB_AVAILABLE 1
 #include "elf-bfd.h"
@@ -64,6 +85,16 @@
   "s0",   "s1",   "s2",   "s3",   "s4",   "s5",   "s6",   "s7",
   "t8",   "t9",   "k0",   "k1",   "gp",   "sp",   "s8",   "ra"
 };
+ 
+static const char *const mips_accumulator_names_alias[16] = {
+  "reserve", "m0l", "m0h", "m0", "reserve", "m1l", "m1h", "m1",
+  "reserve", "m2l", "m2h", "m2", "reserve", "m3l", "m3h", "m3"
+};
+
+static const char *const mips_radreg_names_alias[14] = {
+  "cbs0", "cbs1", "cbs2", "reserved", "cbe0", "cbe1", "cbe2", "reserved",
+  "lps0", "lpe0", "lpc0", "reserved", "mmd", "reserved"
+};
 
 static const char * const mips_gpr_names_newabi[32] =
 {
@@ -473,6 +504,15 @@
   { "vr4120",	1, bfd_mach_mips4120, CPU_VR4120, ISA_MIPS3, 0,
     mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
     mips_hwr_names_numeric },
+  { "4180",  1, bfd_mach_mips4180, CPU_LX4180, ISA_MIPS1, 0,
+    mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
+    mips_hwr_names_numeric},
+  { "4181",  1, bfd_mach_mips4181, CPU_RLX4181, ISA_MIPS1, 0,
+    mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
+    mips_hwr_names_numeric},
+  { "4281",  1, bfd_mach_mips4281, CPU_RLX4281, ISA_MIPS1, 0,
+    mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
+    mips_hwr_names_numeric},
   { "r4300",	1, bfd_mach_mips4300, CPU_R4300, ISA_MIPS3, 0,
     mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
     mips_hwr_names_numeric },
@@ -488,6 +528,15 @@
   { "r5000",	1, bfd_mach_mips5000, CPU_R5000, ISA_MIPS4, 0,
     mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
     mips_hwr_names_numeric },
+  { "5181",  1, bfd_mach_mips5181, CPU_RLX5181, ISA_MIPS1, 0,
+    mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
+    mips_hwr_names_numeric},
+  { "5281",  1, bfd_mach_mips5281, CPU_RLX5281, ISA_MIPS1, 0,
+    mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
+    mips_hwr_names_numeric},
+  { "5280",  1, bfd_mach_mips5280, CPU_LX5280, ISA_MIPS1, 0,
+    mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
+    mips_hwr_names_numeric},
   { "vr5400",	1, bfd_mach_mips5400, CPU_VR5400, ISA_MIPS4, 0,
     mips_cp0_names_numeric, NULL, 0, mips_cp1_names_numeric,
     mips_hwr_names_numeric },
Index: host-binutils-2.28.1-p/opcodes/mips16-opc.c
===================================================================
--- host-binutils-2.28.1-p.orig/opcodes/mips16-opc.c	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/opcodes/mips16-opc.c	2018-01-12 10:42:03.265143654 +0800
@@ -185,6 +185,11 @@
 #define I64	INSN_ISA64
 #define T3	INSN_3900
 
+#define RLX1    INSN_4180 | INSN_4181 | INSN_4281 | INSN_5181 | INSN_5280 | INSN_5281
+#define RLX2    INSN_4181 | INSN_4281 | INSN_5181 | INSN_5280 | INSN_5281
+#define RLX3    INSN_4181 | INSN_4281 | INSN_5181 | INSN_5281
+#define RLX4    INSN_5181 | INSN_5280 | INSN_5281
+
 const struct mips_opcode mips16_opcodes[] =
 {
 /* name,    args,	match,	mask,		pinfo,			pinfo2, membership,	ase,	exclusions */
@@ -229,6 +234,7 @@
 {"bne",     "x,I,p",	0, (int) M_BNE_I,	INSN_MACRO,		0,		I1,	0,	0 },
 {"bnez",    "x,p",	0x2800, 0xf800,		RD_1,			CBR,		I1,	0,	0 },
 {"break",   "6",	0xe805, 0xf81f,		TRAP,			SH,		I1,	0,	0 },
+{"break",   "",   0xe805, 0xffff, TRAP,   0,  RLX1, 0, 0},
 {"bteqz",   "p",	0x6000, 0xff00,		RD_T,			CBR,		I1,	0,	0 },
 {"btnez",   "p",	0x6100, 0xff00,		RD_T,			CBR,		I1,	0,	0 },
 {"cmpi",    "x,U",	0x7000, 0xf800,		RD_1|WR_T,		0,		I1,	0,	0 },
@@ -312,10 +318,18 @@
 {"lw",	    "x,V(P)",	0xb000, 0xf800,		WR_1,			RD_PC,		I1,	0,	0 },
 {"lw",	    "x,V(S)",	0x9000, 0xf800,		WR_1,			RD_SP,		I1,	0,	0 },
 {"lwu",     "y,W(x)",	0xb800, 0xf800,		WR_1|RD_3, 		0,		I3,	0,	0 },
+{"madh",    "x,y",  0xf800, 0xf81f, RD_1|RD_2|WR_HI|WR_LO, 0, RLX1, 0, 0},
+{"madl",    "x,y",   0xf802, 0xf81f, RD_1|RD_2|WR_HI|WR_LO, 0, RLX1, 0, 0},
+{"mazh",    "x,y",   0xf804, 0xf81f, RD_1|RD_2|WR_HI|WR_LO, 0, RLX1, 0, 0},
+{"mazl",    "x,y",   0xf806, 0xf81f, RD_1|RD_2|WR_HI|WR_LO, 0, RLX1, 0, 0},
 {"mfhi",    "x",	0xe810, 0xf8ff,		WR_1|RD_HI,		SH,		I1,	0,	0 },
 {"mflo",    "x",	0xe812, 0xf8ff,		WR_1|RD_LO,		SH,		I1,	0,	0 },
 {"move",    "y,X",	0x6700, 0xff00,		WR_1|RD_2,		SH,		I1,	0,	0 },
 {"move",    "Y,Z",	0x6500, 0xff00,		WR_1|RD_2,		SH,		I1,	0,	0 },
+{"msbh",    "x,y",  0xf810, 0xf81f, RD_1|RD_2|WR_HI|WR_LO, 0, RLX1, 0, 0},
+{"msbl",    "x,y", 0xf812, 0xf81f, RD_1|RD_2|WR_HI|WR_LO, 0, RLX1, 0, 0},
+{"mszh",    "x,y", 0xf814, 0xf81f, RD_1|RD_2|WR_HI|WR_LO, 0, RLX1, 0, 0},
+{"mszl",    "x,y",   0xf816, 0xf81f, RD_1|RD_2|WR_HI|WR_LO, 0, RLX1, 0, 0},
 {"mul",     "z,v,y",	0, (int) M_MUL, 	INSN_MACRO,		0,		I1,	0,	0 },
 {"mult",    "x,y",	0xe818, 0xf81f,		RD_1|RD_2|WR_HI|WR_LO,	SH,		I1,	0,	0 },
 {"multu",   "x,y",	0xe819, 0xf81f,		RD_1|RD_2|WR_HI|WR_LO,	SH,		I1,	0,	0 },
Index: host-binutils-2.28.1-p/opcodes/mips-opc.c
===================================================================
--- host-binutils-2.28.1-p.orig/opcodes/mips-opc.c	2018-01-12 10:42:03.269143497 +0800
+++ host-binutils-2.28.1-p/opcodes/mips-opc.c	2018-01-12 10:42:03.269143497 +0800
@@ -377,6 +377,17 @@
 #define D34	ASE_DSPR3
 #define D64	ASE_DSP64
 
+#define RLX0 INSN_4180
+#define RLX1 INSN_5280
+#define RLX2 INSN_4181|INSN_5181
+#define RLX3 INSN_4281|INSN_5281
+
+#define RLXA (RLX0|RLX1|RLX2|RLX3)
+#define RLXB (RLX1|RLX2|RLX3)
+
+#define RAD1 INSN_5181|INSN_5280|INSN_5281
+#define RAD2 INSN_5281
+
 /* MIPS MT ASE support.  */
 #define MT32	ASE_MT
 
@@ -420,7 +431,7 @@
 {"pref",		"k,A(b)",	0,    (int) M_PREF_AB,	INSN_MACRO,		0,		I4_32|G3,	0,	0 },
 {"prefx",		"h,t(b)",	0x4c00000f, 0xfc0007ff, RD_2|RD_3|FP_S|LM,		0,		I4_33,		0,	I37 },
 {"nop",			"",		0x00000000, 0xffffffff, 0,              	INSN2_ALIAS,	I1,		0,	0 }, /* sll */
-{"ssnop",		"",		0x00000040, 0xffffffff, 0,              	INSN2_ALIAS,	I1,		0,	0 }, /* sll */
+{"ssnop",   "",         0x00000040, 0xffffffff, 0,               INSN2_ALIAS,  I1|RLX3 , 0, 0 }, /* sll */
 {"ehb",			"",		0x000000c0, 0xffffffff, 0,              	INSN2_ALIAS,	I1,		0,	0 }, /* sll */
 {"li",			"t,j",		0x24000000, 0xffe00000, WR_1,			INSN2_ALIAS,	I1,		0,	0 }, /* addiu */
 {"li",			"t,i",		0x34000000, 0xffe00000, WR_1,			INSN2_ALIAS,	I1,		0,	0 }, /* ori */
@@ -937,7 +948,7 @@
 {"flushid",		"",		0xbc030000, 0xffffffff, 0, 			0,		L1,		0,	0 },
 {"wb",			"o(b)",		0xbc040000, 0xfc1f0000, RD_2|SM,		0,		L1,		0,	0 },
 {"cache",		"k,+j(b)",	0x7c000025, 0xfc00007f, RD_3,			0,		I37,		0,	0 },
-{"cache",		"k,o(b)",	0xbc000000, 0xfc000000, RD_3,           	0,		I3_32|T3,	0,	I37 },
+{"cache",   "k,o(b)",   0xbc000000, 0xfc000000, RD_3,            0,    I3_32|T3|RLXB,  0,  I37},
 {"cache",		"k,A(b)",	0,    (int) M_CACHE_AB, INSN_MACRO,		0,		I3_32|T3,	0,	0 },
 {"ceil.l.d",		"D,S",		0x4620000a, 0xffff003f, WR_1|RD_2|FP_D,		0,		I3_33,		0,	0 },
 {"ceil.l.s",		"D,S",		0x4600000a, 0xffff003f, WR_1|RD_2|FP_S|FP_D,	0,		I3_33,		0,	0 },
@@ -999,7 +1010,7 @@
 /* dctr and dctw are used on the r5000.  */
 {"dctr",		"o(b)",	 	0xbc050000, 0xfc1f0000, RD_2,			0,		I3,		0,	0 },
 {"dctw",		"o(b)",		0xbc090000, 0xfc1f0000, RD_2,			0,		I3,		0,	0 },
-{"deret",		"",		0x4200001f, 0xffffffff, NODS, 			0,		I32|G2,		0,	0 },
+{"deret",   "",       0x4200001f, 0xffffffff, 0,        0,    I32|G2|RLXA,   0,  0 },
 {"dext",		"t,r,+A,+H",	0x7c000003, 0xfc00003f, WR_1|RD_2,    		0,		I65,		0,	0 },
 {"dext",		"t,r,+A,+G",	0x7c000001, 0xfc00003f, WR_1|RD_2,    		0,		I65,		0,	0 }, /* dextm */
 {"dext",		"t,r,+E,+H",	0x7c000002, 0xfc00003f, WR_1|RD_2,    		0,		I65,		0,	0 }, /* dextu */
@@ -1264,8 +1275,8 @@
 {"li.s",		"t,f",		0,    (int) M_LI_S,	INSN_MACRO,		INSN2_M_FP_S,	I1,		0,	0 },
 {"li.s",		"T,l",		0,    (int) M_LI_SS,	INSN_MACRO,		INSN2_M_FP_S,	I1,		0,	0 },
 {"ll",			"t,+j(b)",	0x7c000036, 0xfc00007f, WR_1|RD_3|LM,		0,		I37,		0,	0 },
-{"ll",			"t,o(b)",	0xc0000000, 0xfc000000, WR_1|RD_3|LM,		0,		I2,		0,	EE|I37 },
-{"ll",			"t,A(b)",	0,    (int) M_LL_AB,	INSN_MACRO,		0,		I2,		0,	EE },
+{"ll",     "t,o(b)", 0xc0000000, 0xfc000000, WR_1|RD_3|LM,    0,    I2|RLX2|RLX3 , 0, EE|I37 },
+{"ll",     "t,A(b)", 0,    (int) M_LL_AB,  INSN_MACRO,   0,    I2|RLX2|RLX3, 0,  EE },
 {"lld",			"t,+j(b)",	0x7c000037, 0xfc00007f, WR_1|RD_3|LM,		0,		I69,		0,	0 },
 {"lld",			"t,o(b)",	0xd0000000, 0xfc000000, WR_1|RD_3|LM,		0,		I3,		0,	EE|I69 },
 {"lld",			"t,A(b)",	0,    (int) M_LLD_AB,	INSN_MACRO,		0,		I3,		0,	EE },
@@ -1319,8 +1330,8 @@
 {"maccu",		"d,s,t",	0x00000068, 0xfc0007ff,	WR_1|RD_2|RD_3|WR_HILO,	     0,		N412,		0,	0 },
 {"maccu",		"d,s,t",	0x00000159, 0xfc0007ff, WR_1|RD_2|RD_3|WR_HILO,	     0,		N5,		0,	0 },
 {"maccus",		"d,s,t",	0x00000468, 0xfc0007ff,	WR_1|RD_2|RD_3|WR_HILO,	     0,		N412,		0,	0 },
-{"mad",			"s,t",		0x70000000, 0xfc00ffff, RD_1|RD_2|MOD_HILO,	     0,		P3,		0,	0 },
-{"madu",		"s,t",		0x70000001, 0xfc00ffff, RD_1|RD_2|MOD_HILO,	     0,		P3,		0,	0 },
+{"mad",     "s,t",      0x70000000, 0xfc00ffff, RD_1|RD_2|MOD_HILO,     0,   P3|RLXA , 0, 0},
+{"madu",    "s,t",      0x70000001, 0xfc00ffff, RD_1|RD_2|MOD_HILO,     0,   P3|RLXA , 0, 0},
 {"madd.d",		"D,R,S,T",	0x4c000021, 0xfc00003f, WR_1|RD_2|RD_3|RD_4|FP_D,    0,		I4_33,		0,	I37 },
 {"madd.d",		"D,S,T",	0x46200018, 0xffe0003f,	WR_1|RD_2|RD_3|FP_D,	     0,		IL2E,		0,	0 },
 {"madd.d",		"D,S,T",	0x72200018, 0xffe0003f,	WR_1|RD_2|RD_3|FP_D,	     0,		IL2F,		0,	0 },
@@ -1381,6 +1392,7 @@
 {"mftr",		"d,t,!,H,$",	0x41000000, 0xffe007c8, WR_1|TRAP,		0,		0,		MT32,	0 },
 {"mfc0",		"t,G",		0x40000000, 0xffe007ff,	WR_1|RD_C0|LC,		0,		I1,		0,	0 },
 {"mfc0",		"t,G,H",	0x40000000, 0xffe007f8,	WR_1|RD_C0|LC,		0,		I32,		0,	0 },
+{"mfc0",    "t,G,#H", 0x40000000, 0xffe007ff, WR_1|RD_C0|LC,   0,    RLX3, 0, 0 },
 {"mfgc0",		"t,G",		0x40600000, 0xffe007ff,	WR_1|RD_C0|LC,		0,		0,		IVIRT,	0 },
 {"mfgc0",		"t,G,H",	0x40600000, 0xffe007f8, WR_1|RD_C0|LC,		0,		0,		IVIRT,	0 },
 {"mfhc0",		"t,G",		0x40400000, 0xffe007ff,	WR_1|RD_C0|LC,		0,		I33,		XPA,	0 },
@@ -1389,6 +1401,7 @@
 {"mfhgc0",		"t,G,H",	0x40600400, 0xffe007f8,	WR_1|RD_C0|LC,		0,		I33,		IVIRT|XPA,	0 },
 {"mfc1",		"t,S",		0x44000000, 0xffe007ff,	WR_1|RD_2|LC|FP_S,	0,		I1,		0,	0 },
 {"mfc1",		"t,G",		0x44000000, 0xffe007ff,	WR_1|RD_2|LC|FP_S,	0,		I1,		0,	0 },
+{"mfc1",    "t,G,#H", 0x44000000, 0xffe007ff, WR_1|RD_2|LC|FP_S, 0,    RLX3, 0, 0 },
 {"mfhc1",		"t,S",		0x44600000, 0xffe007ff,	WR_1|RD_2|LC|FP_D,	0,		I33,		0,	0 },
 {"mfhc1",		"t,G",		0x44600000, 0xffe007ff,	WR_1|RD_2|LC|FP_D,	0,		I33,		0,	0 },
 /* mfc2 is at the bottom of the table.  */
@@ -1419,7 +1432,7 @@
 {"movf.l",		"X,Y,N",	0x46a00011, 0xffe3003f, WR_1|RD_2|RD_CC|FP_D,	0,		SB1,		MX,	0 },
 {"movf.s",		"D,S,N",	0x46000011, 0xffe3003f, WR_1|RD_2|RD_CC|FP_S,   0,		I4_32,		0,	I37 },
 {"movf.ps",		"D,S,N",	0x46c00011, 0xffe3003f, WR_1|RD_2|RD_CC|FP_D,	0,		I5_33,		0,	I37 },
-{"movn",		"d,v,t",	0x0000000b, 0xfc0007ff, WR_1|RD_2|RD_3, 	0,		I4_32|IL2E|IL2F|EE, 0,	I37 },
+{"movn",    "d,v,t",    0x0000000b, 0xfc0007ff, WR_1|RD_2|RD_3,  0,    I4_32|IL2E|IL2F|RLXB, 0, I37 },
 {"movnz",		"d,v,t",	0x0000000b, 0xfc0007ff, WR_1|RD_2|RD_3, 	0,		IL2E|IL2F|IL3A,	0,	0 },
 {"ffc",			"d,v",		0x0000000b, 0xfc1f07ff,	WR_1|RD_2,		0,		L1,		0,	0 },
 {"movn.d",		"D,S,t",	0x46200013, 0xffe0003f, WR_1|RD_2|RD_3|FP_D,    0,		I4_32,		0,	I37 },
@@ -1433,7 +1446,7 @@
 {"movt.l",		"X,Y,N",	0x46a10011, 0xffe3003f, WR_1|RD_2|RD_CC|FP_D,   0,		SB1,		MX,	0 },
 {"movt.s",		"D,S,N",	0x46010011, 0xffe3003f, WR_1|RD_2|RD_CC|FP_S,   0,		I4_32,		0,	I37 },
 {"movt.ps",		"D,S,N",	0x46c10011, 0xffe3003f, WR_1|RD_2|RD_CC|FP_D,	0,		I5_33,		0,	I37 },
-{"movz",		"d,v,t",	0x0000000a, 0xfc0007ff, WR_1|RD_2|RD_3, 	0,		I4_32|IL2E|IL2F|EE, 0,	I37 },
+{"movz",    "d,v,t",    0x0000000a, 0xfc0007ff, WR_1|RD_2|RD_3,  0,    I4_32|IL2E|IL2F|RLXB, 0, I37 },
 {"ffs",			"d,v",		0x0000000a, 0xfc1f07ff,	WR_1|RD_2,		0,		L1,		0,	0 },
 {"movz.d",		"D,S,t",	0x46200012, 0xffe0003f, WR_1|RD_2|RD_3|FP_D,    0,		I4_32,		0,	I37 },
 {"movz.l",		"D,S,t",	0x46a00012, 0xffe0003f, WR_1|RD_2|RD_3|FP_D,    0,		SB1,		MX,	0 },
@@ -1462,11 +1475,11 @@
 {"msub.ps",		"D,S,T",	0x45600019, 0xffe0003f,	WR_1|RD_2|RD_3|FP_D,	0,		IL2E,		0,	0 },
 {"msub.ps",		"D,S,T",	0x72c00019, 0xffe0003f,	WR_1|RD_2|RD_3|FP_D,	0,		IL2F,		0,	0 },
 {"msub",		"s,t",		0x0000001e, 0xfc00ffff, RD_1|RD_2|WR_HILO,	0,		L1,		0,	0 },
-{"msub",		"s,t",		0x70000004, 0xfc00ffff, RD_1|RD_2|MOD_HILO,     0,		I32|N55,	0,	I37 },
+{"msub",    "s,t",    0x70000004, 0xfc00ffff, RD_1|RD_2|MOD_HILO,     0,   I32|N55|RLXA, 0, I37 },
 {"msub",		"7,s,t",	0x70000004, 0xfc00e7ff, RD_2|RD_3|MOD_a,        0,              0,		D32,	0 },
 {"msuba.s",		"S,T",		0x4600001f, 0xffe007ff,	RD_1|RD_2|FP_S,		0,		EE,		0,	0 },
 {"msubu",		"s,t",		0x0000001f, 0xfc00ffff, RD_1|RD_2|WR_HILO,	0,		L1,		0,	0 },
-{"msubu",		"s,t",		0x70000005, 0xfc00ffff, RD_1|RD_2|MOD_HILO,     0,		I32|N55,	0,	I37 },
+{"msubu",   "s,t",    0x70000005, 0xfc00ffff, RD_1|RD_2|MOD_HILO,     0,   I32|N55|RLXA, 0,  I37 },
 {"msubu",		"7,s,t",	0x70000005, 0xfc00e7ff, RD_2|RD_3|MOD_a,        0,              0,		D32,	0 },
 {"mtbpc",		"t",		0x4080c000, 0xffe0ffff,	RD_1|WR_C0|CM,		0,		EE,		0,	0 },
 {"mtdab",		"t",		0x4080c004, 0xffe0ffff,	RD_1|WR_C0|CM,		0,		EE,		0,	0 },
@@ -1479,6 +1492,7 @@
 {"mtps",		"t,P",		0x4080c800, 0xffe0ffc1,	RD_1|WR_C0|CM,		0,		M1|N5|EE,	0,	0 },
 {"mtc0",		"t,G",		0x40800000, 0xffe007ff,	RD_1|WR_C0|WR_CC|CM,	0,		I1,		0,	0 },
 {"mtc0",		"t,G,H",	0x40800000, 0xffe007f8,	RD_1|WR_C0|WR_CC|CM,	0,		I32,		0,	0 },
+{"mtc0",    "t,G,#H", 0x40800000, 0xffe007ff, RD_1|WR_C0|WR_CC|CM, 0,    RLX3, 0, 0 },
 {"mtgc0",		"t,G",		0x40600200, 0xffe007ff,	RD_1|WR_C0|WR_CC|CM,	0,		0,		IVIRT,	0 },
 {"mtgc0",		"t,G,H",	0x40600200, 0xffe007f8, RD_1|WR_C0|WR_CC|CM,   0,		0,		IVIRT,	0 },
 {"mthc0",		"t,G",		0x40c00000, 0xffe007ff,	RD_1|WR_C0|WR_CC|CM,	0,		I33,		XPA,	0 },
@@ -1487,6 +1501,7 @@
 {"mthgc0",		"t,G,H",	0x40600600, 0xffe007f8,	RD_1|WR_C0|WR_CC|CM,	0,		I33,		IVIRT|XPA,	0 },
 {"mtc1",		"t,S",		0x44800000, 0xffe007ff,	RD_1|WR_2|CM|FP_S,	0,		I1,		0,	0 },
 {"mtc1",		"t,G",		0x44800000, 0xffe007ff,	RD_1|WR_2|CM|FP_S,	0,		I1,		0,	0 },
+{"mtc1",    "t,G,#H", 0x44800000, 0xffe007ff, RD_1|WR_2|CM|FP_S, 0,    RLX3, 0, 0 },
 {"mthc1",		"t,S",		0x44e00000, 0xffe007ff,	RD_1|WR_2|CM|FP_D,	0,		I33,		0,	0 },
 {"mthc1",		"t,G",		0x44e00000, 0xffe007ff,	RD_1|WR_2|CM|FP_D,	0,		I33,		0,	0 },
 /* mtc2 is at the bottom of the table.  */
@@ -1794,8 +1809,8 @@
 {"sb",			"t,o(b)",	0xa0000000, 0xfc000000,	RD_1|RD_3|SM,		0,		I1,		0,	0 },
 {"sb",			"t,A(b)",	0,    (int) M_SB_AB,	INSN_MACRO,		0,		I1,		0,	0 },
 {"sc",			"t,+j(b)",	0x7c000026, 0xfc00007f, MOD_1|RD_3|SM,		0,		I37,		0,	0 },
-{"sc",			"t,o(b)",	0xe0000000, 0xfc000000, MOD_1|RD_3|SM,		0,		I2,		0,	EE|I37 },
-{"sc",			"t,A(b)",	0,    (int) M_SC_AB,	INSN_MACRO,		0,		I2,		0,	EE },
+{"sc",      "t,o(b)", 0xe0000000, 0xfc000000, MOD_1|RD_3|SM,  0,    I2|RLX2|RLX3,  0,  EE|I37 },
+{"sc",      "t,A(b)", 0,    (int) M_SC_AB,  INSN_MACRO,   0,    I2|RLX2|RLX3,  0,  EE },
 {"scd",			"t,+j(b)",	0x7c000027, 0xfc00007f, MOD_1|RD_3|SM,		0,		I69,		0,	0 },
 {"scd",			"t,o(b)",	0xf0000000, 0xfc000000, MOD_1|RD_3|SM,		0,		I3,		0,	EE|I69 },
 {"scd",			"t,A(b)",	0,    (int) M_SCD_AB,	INSN_MACRO,		0,		I3,		0,	EE },
@@ -1806,9 +1821,9 @@
 {"sdbbp",		"c",		0x0000000e, 0xfc00ffff,	TRAP,			0,		G2,		0,	0 },
 {"sdbbp",		"c,q",		0x0000000e, 0xfc00003f,	TRAP,			0,		G2,		0,	0 },
 {"sdbbp",		"",		0x0000000e, 0xffffffff, TRAP,           	0,		I37,		0,	0 },
-{"sdbbp",		"",		0x7000003f, 0xffffffff, TRAP,           	0,		I32,		0,	I37 },
+{"sdbbp",   "",     0x7000003f, 0xffffffff, TRAP,            0,    I32|RLXA,   0,  I37 },
 {"sdbbp",		"B",		0x0000000e, 0xfc00003f, TRAP,           	0,		I37,		0,	0 },
-{"sdbbp",		"B",		0x7000003f, 0xfc00003f, TRAP,           	0,		I32,		0,	I37 },
+{"sdbbp",   "B",    0x7000003f, 0xfc00003f, TRAP,            0,    I32|RLXA,   0,  I37 },
 {"sdc1",		"T,o(b)",	0xf4000000, 0xfc000000, RD_1|RD_3|SM|FP_D,	0,		I2,		0,	SF },
 {"sdc1",		"E,o(b)",	0xf4000000, 0xfc000000, RD_1|RD_3|SM|FP_D,	0,		I2,		0,	SF },
 {"sdc1",		"T,A(b)",	0,    (int) M_SDC1_AB,	INSN_MACRO,		INSN2_M_FP_D,	I2,		0,	SF },
@@ -1971,8 +1986,9 @@
 {"sync_release",	"",		0x0000048f, 0xffffffff,	NODS,			0,		I33,		0,	0 },
 {"sync_rmb",		"",		0x000004cf, 0xffffffff,	NODS,			0,		I33,		0,	0 },
 {"sync_wmb",		"",		0x0000010f, 0xffffffff,	NODS,			0,		I33,		0,	0 },
-{"sync",		"",		0x0000000f, 0xffffffff,	NODS,			0,		I2|G1,		0,	0 },
+{"sync",    "",    0x0000000f, 0xffffffff, NODS,    0,    I2|G1|RLX3,   0,  0 },
 {"sync",		"1",		0x0000000f, 0xfffff83f,	NODS,			0,		I32,		0,	0 },
+{"sync",    "#I",  0x0000000f, 0xffffffff, NODS,    0,    RLX3, 0, 0 },
 {"sync.p",		"",		0x0000040f, 0xffffffff,	NODS,			0,		I2,		0,	0 },
 {"sync.l",		"",		0x0000000f, 0xffffffff,	NODS,			0,		I2,		0,	0 },
 {"synci",		"o(b)",		0x041f0000, 0xfc1f0000,	RD_2|SM,		0,		I33,		0,	0 },
@@ -2068,6 +2084,10 @@
    to allow the XPA instructions to take precedence.  */
 {"ctc0",		"t,G",		0x40c00000, 0xffe007ff,	RD_1|WR_CC|CM,		0,		I1,		0,	IOCT|IOCTP|IOCT2 },
 {"cfc0",		"t,G",		0x40400000, 0xffe007ff,	WR_1|RD_C0|LC,		0,		I1,		0,	IOCT|IOCTP|IOCT2 },
+{"cfc0",    "t,G,#H",  0x40400000, 0xffe007ff, LC|WR_1|RD_C0,   0,    RLX3,    0,  IOCT|IOCTP|IOCT2  },
+//{"ctc0",    "t,G,#H",  0x40c00000, 0xffe007ff, CM|RD_1|WR_CC,   0,    RLX3,    0,  IOCT|IOCTP|IOCT2  },
+//{"cfc1",    "t,G,#H",  0x44400000, 0xffe007c0, LC|WR_1|RD_C1|FP_S,  0,      RLX3,    0,  IOCT|IOCTP|IOCT2  },
+//{"ctc1",    "t,G,#H",  0x44c00000, 0xffe007c0, CM|RD_1|WR_CC|FP_S,  0,    RLX3,    0,  IOCT|IOCTP|IOCT2 },
 
 /* Coprocessor 2 move/branch operations overlap with VR5400 .ob format
    instructions so they are here for the latters to take precedence.  */
@@ -2082,6 +2102,8 @@
 {"bc2tl",		"p",		0x49030000, 0xffff0000,	RD_CC|CBL,		0,		I2|T3,		0,	IOCT|IOCTP|IOCT2|I37 },
 {"bc2tl",		"N,p",		0x49030000, 0xffe30000,	RD_CC|CBL,		0,		I32,		0,	IOCT|IOCTP|IOCT2|I37 },
 {"cfc2",		"t,G",		0x48400000, 0xffe007ff,	WR_1|RD_C2|LC,		0,		I1,		0,	IOCT|IOCTP|IOCT2|EE },
+//{"cfc2",    "t,G,#H",  0x48400000, 0xffe007c0, WR_1|RD_C2|LC,   0,    RLX3,    0,  IOCT|IOCTP|IOCT2|EE },
+//{"ctc2",    "t,G,#H",  0x48c00000, 0xffe007c0, WR_1|RD_C2|CM,   0,    RLX3,    0,  IOCT|IOCTP|IOCT2|EE },
 {"cfc2",		"t,+9",		0x48400000, 0xffe007ff,	WR_1|RD_C2|LC,		0,		EE,		0,	0 },
 {"cfc2.i",		"t,+9",		0x48400001, 0xffe007ff, WR_1|RD_C2|LC,		0,		EE,		0,	0 },
 {"cfc2.ni",		"t,+9",		0x48400000, 0xffe007ff, WR_1|RD_C2|LC,		0,		EE,		0,	0 },
@@ -2097,11 +2119,13 @@
 {"dmtc2",		"t,G,H",	0x48a00000, 0xffe007f8,	RD_1|WR_C2|WR_CC|CM,	0,		I64,		0,	IOCT|IOCTP|IOCT2 },
 {"mfc2",		"t,G",		0x48000000, 0xffe007ff,	WR_1|RD_C2|LC,		0,		I1,		0,	IOCT|IOCTP|IOCT2|EE },
 {"mfc2",		"t,G,H",	0x48000000, 0xffe007f8,	WR_1|RD_C2|LC,		0,		I32,		0,	IOCT|IOCTP|IOCT2 },
+//{"mfc2",    "t,G,#H", 0x48000000, 0xffe007c0, WR_1|RD_C2|LC,   0,    RLX3,   0,  IOCT|IOCTP|IOCT2 },
 {"mfhc2",		"t,G",		0x48600000, 0xffe007ff,	WR_1|RD_C2|LC,		0,		I33,		0,	IOCT|IOCTP|IOCT2 },
 {"mfhc2",		"t,G,H",	0x48600000, 0xffe007f8,	WR_1|RD_C2|LC,		0,		I33,		0,	IOCT|IOCTP|IOCT2 },
 {"mfhc2",		"t,i",		0x48600000, 0xffe00000,	WR_1|RD_C2|LC,		0,		I33,		0,	IOCT|IOCTP|IOCT2 },
 {"mtc2",		"t,G",		0x48800000, 0xffe007ff,	RD_1|WR_C2|WR_CC|CM,	0,		I1,		0,	IOCT|IOCTP|IOCT2|EE },
 {"mtc2",		"t,G,H",	0x48800000, 0xffe007f8,	RD_1|WR_C2|WR_CC|CM,	0,		I32,		0,	IOCT|IOCTP|IOCT2 },
+//{"mtc2",    "t,G,#H", 0x48800000, 0xffe007c0, RD_1|WR_C2|WR_CC|CM,   0,    RLX3,    0,  IOCT|IOCTP|IOCT2 },
 {"mthc2",		"t,G",		0x48e00000, 0xffe007ff,	RD_1|WR_C2|WR_CC|CM,	0,		I33,		0,	IOCT|IOCTP|IOCT2 },
 {"mthc2",		"t,G,H",	0x48e00000, 0xffe007f8,	RD_1|WR_C2|WR_CC|CM,	0,		I33,		0,	IOCT|IOCTP|IOCT2 },
 {"mthc2",		"t,i",		0x48e00000, 0xffe00000,	RD_1|WR_C2|WR_CC|CM,	0,		I33,		0,	IOCT|IOCTP|IOCT2 },
@@ -2118,13 +2142,17 @@
 {"bc3t",		"p",		0x4d010000, 0xffff0000,	RD_CC|CBD,		0,		I1,		0,	IOCT|IOCTP|IOCT2|EE|I37 },
 {"bc3tl",		"p",		0x4d030000, 0xffff0000,	RD_CC|CBL,		0,		I2|T3,		0,	IOCT|IOCTP|IOCT2|EE|I37 },
 {"cfc3",		"t,G",		0x4c400000, 0xffe007ff,	WR_1|RD_C3|LC,		0,		I1,		0,	IOCT|IOCTP|IOCT2|EE|I37 },
+//{"cfc3",    "t,G,#H",  0x4c400000, 0xffe007c0, WR_1|RD_C3|LC,   0,    RLX3,   0,  IOCT|IOCTP|IOCT2|EE|I37 },
 {"ctc3",		"t,G",		0x4cc00000, 0xffe007ff,	RD_1|WR_CC|CM,		0,		I1,		0,	IOCT|IOCTP|IOCT2|EE|I37 },
+//{"ctc3",    "t,G,#H",   0x4cc00000, 0xffe007c0, RD_1|WR_CC|CM,  0,    RLX3,   0,  IOCT|IOCTP|IOCT2|EE|I37 },
 {"dmfc3",		"t,G",		0x4c200000, 0xffe007ff,	WR_1|RD_C3|LC,		0,		I3,		0,	IOCT|IOCTP|IOCT2|EE|I37 },
 {"dmtc3",		"t,G",		0x4ca00000, 0xffe007ff,	RD_1|WR_C3|WR_CC|CM,	0,		I3,		0,	IOCT|IOCTP|IOCT2|EE|I37 },
 {"mfc3",		"t,G",		0x4c000000, 0xffe007ff,	WR_1|RD_C3|LC,		0,		I1,		0,	IOCT|IOCTP|IOCT2|EE|I37 },
 {"mfc3",		"t,G,H",	0x4c000000, 0xffe007f8,	WR_1|RD_C3|LC,		0,		I32,		0,	IOCT|IOCTP|IOCT2|EE|I37 },
+//{"mfc3",    "t,G,#H", 0x4c000000, 0xffe007c0, WR_1|RD_C3|LC,   0,    RLX3,    0,  IOCT|IOCTP|IOCT2|EE|I37 },
 {"mtc3",		"t,G",		0x4c800000, 0xffe007ff,	RD_1|WR_C3|WR_CC|CM,	0,		I1,		0,	IOCT|IOCTP|IOCT2|EE|I37 },
 {"mtc3",		"t,G,H",	0x4c800000, 0xffe007f8,	RD_1|WR_C3|WR_CC|CM,	0,		I32,		0,	IOCT|IOCTP|IOCT2|EE|I37 },
+//{"mtc3",    "t,G,#H", 0x4c800000, 0xffe007c0, RD_1|WR_C3|WR_CC|CM,   0,    RLX3,    0,  IOCT|IOCTP|IOCT2|EE|I37 },
 
   /* Conflicts with the 4650's "mul" instruction.  Nobody's using the
      4010 any more, so move this insn out of the way.  If the object
@@ -2149,6 +2177,7 @@
 {"addu_s.qb",		"d,s,t",	0x7c000110, 0xfc0007ff, WR_1|RD_2|RD_3,		0,		0,		D32,	0 },
 {"addwc",		"d,s,t",	0x7c000450, 0xfc0007ff, WR_1|RD_2|RD_3,		0,		0,		D32,	0 },
 {"bitrev",		"d,t",		0x7c0006d2, 0xffe007ff, WR_1|RD_2,		0,		0,		D32,	0 },
+//{"bitrev",    "d,t,s",  0x7c00000c, 0xFC0007FF, RD_3|RD_2|WR_1,   0,    RAD1,    D32,  0 },
 {"bposge32",		"p",		0x041c0000, 0xffff0000, CBD,			0,		0,		D32,	0 },
 {"bposge32c",		"p",		0x04180000, 0xffff0000, NODS,			FS,		0,		D34,	0 },
 {"bposge64",		"p",		0x041d0000, 0xffff0000, CBD,			0,		0,		D64,	0 },
@@ -3156,27 +3185,33 @@
 {"udi0",		"s,t,+2",	0x70000010, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi0",		"s,+3",		0x70000010, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi0",		"+4",		0x70000010, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
+//{"udi0",     "d,v,t",  0x00000038, 0xfc0007ff, UDI,   0,    RLXB,  0,  0 },
 {"udi1",		"s,t,d,+1",	0x70000011, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi1",		"s,t,+2",	0x70000011, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi1",		"s,+3",		0x70000011, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi1",		"+4",		0x70000011, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
+//{"udi1",     "d,v,t",  0x0000003a, 0xfc0007ff, UDI,   0,    RLXB,  0,  0 },
 {"udi2",		"s,t,d,+1",	0x70000012, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi2",		"s,t,+2",	0x70000012, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi2",		"s,+3",		0x70000012, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi2",		"+4",		0x70000012, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
+//{"udi2",     "d,v,t",  0x0000003b, 0xfc0007ff, UDI,   0,    RLXB,  0,  0 },
 {"udi3",		"s,t,d,+1",	0x70000013, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi3",		"s,t,+2",	0x70000013, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi3",		"s,+3",		0x70000013, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi3",		"+4",		0x70000013, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
+//{"udi3",     "d,v,t",  0x0000003c, 0xfc0007ff, UDI,   0,    RLXB,  0,  0 },
 {"udi4",		"s,t,d,+1",	0x70000014, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi4",		"s,t,+2",	0x70000014, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi4",		"s,+3",		0x70000014, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi4",		"+4",		0x70000014, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
+//{"udi4",     "d,v,t",  0x0000003e, 0xfc0007ff, UDI,   0,    RLXB,  0,  0 },
 {"udi5",		"s,t,d,+1",	0x70000015, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi5",		"s,t,+2",	0x70000015, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi5",		"s,+3",		0x70000015, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi5",		"+4",		0x70000015, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi6",		"s,t,d,+1",	0x70000016, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
+//{"udi5",     "d,v,t",  0x0000003f, 0xfc0007ff, UDI,   0,    RLXB, 0, 0 },
 {"udi6",		"s,t,+2",	0x70000016, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi6",		"s,+3",		0x70000016, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
 {"udi6",		"+4",		0x70000016, 0xfc00003f,	UDI,			0,		I33,		0,	0 },
@@ -3346,8 +3381,176 @@
 {"cop0",		"C",		0,    (int) M_COP0,	INSN_MACRO,		0,		I1,		0,	IOCT|IOCTP|IOCT2 },
 {"cop1",		"C",		0,    (int) M_COP1,	INSN_MACRO,		INSN2_M_FP_S,	I1,		0,	0 },
 {"cop2",		"C",		0,    (int) M_COP2,	INSN_MACRO,		0,		I1,		0,	IOCT|IOCTP|IOCT2 },
-{"cop3",		"C",		0,    (int) M_COP3,	INSN_MACRO,		0,		I1,		0,	IOCT|IOCTP|IOCT2 },
-/* RFE conflicts with the new Virt spec instruction tlbgp. */
+//{"cop3",     "C",  0,    (int) M_COP3, INSN_MACRO,   0,    I1,   0,  IOCT|IOCTP|IOCT2 },
+
+/* dbb: modified for supporting radiax instructions */
+/* 2006-01-19 tonywu: cleanup radiax instructions definition */
+/* 2008-07-12 tonywu: add taroko support */
+/* 2008-08-31 tonywu: add rad type */
+/*   d1: m0(3), m1(7), m2(11), m3(15) */
+/*   d2: m0l, m0h, m0 ~ m3l, m3h, m3 */
+/*   d3: m0l, m0h, ~ m3l, m3h */
+/*   d4: LXC0 */
+//{"mta2", "s,#d2", 0x7C00005D, 0xFC1F07ff, RD_1, 0, RAD1, 0, 0},
+//{"mta2.g", "s,#d2", 0x7C00015D, 0xFC1F07ff, RD_1, 0, RAD1, 0, 0},
+//{"mfa", "d,#t3", 0x7C00001C, 0xFFE007FF, WR_1, 0, RAD1, 0, 0},
+//{"mfa", "d,#t3,##", 0x7C00001C, 0xFFE0007F, WR_1, 0, RAD1, 0, 0},
+//{"mfa2", "d,#t1", 0x7C00005C, 0xFFE007FF, WR_1, 0, RAD1, 0, 0},
+//{"mfa2", "d,#t1,##", 0x7C00005C, 0xFFE0007F, WR_1, 0, RAD1, 0, 0},
+//{"diva", "#d1,s,t", 0x7C00001A, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"divau", "#d1,s,t", 0x7C00021A, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"multa", "#d1,s,t", 0x7C000112, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"multau", "#d1,s,t", 0x7C000312, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"imulta", "#d1,s,t", 0x7C000102, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"imultau", "#d1,s,t", 0x7C000302, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmulta", "#d1,s,t", 0x7C000502, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"multa2", "#d2,s,t", 0x7C000152, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"imulta2", "#d2,s,t", 0x7C000142, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmulta2", "#d2,s,t", 0x7C000542, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"mulna2", "#d2,s,t", 0x7C000153, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"imulna2", "#d2,s,t", 0x7C000143, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmulna2", "#d2,s,t", 0x7C000543, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"cmulta", "#d1,s,t", 0x7C00001B, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"icmulta", "#d1,s,t", 0x7C00011B, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qcmulta", "#d1,s,t", 0x7C00051B, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"madda", "#d1,s,t", 0x7C000012, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"maddau", "#d1,s,t", 0x7C000212, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"imadda", "#d1,s,t", 0x7C000002, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"imaddau", "#d1,s,t", 0x7C000202, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmadda", "#d1,s,t", 0x7C000402, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"madda2", "#d2,s,t", 0x7C000052, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"imadda2", "#d2,s,t", 0x7C000042, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmadda2", "#d2,s,t", 0x7C000442, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"madda2.s", "#d2,s,t", 0x7C0000D2, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"imadda2.s32", "#d2,s,t", 0x7C0000C2, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmadda2.s32", "#d2,s,t", 0x7C0004C2, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"imadda2.s40", "#d2,s,t", 0x7C0001C2, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmadda2.s40", "#d2,s,t", 0x7C0005C2, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"msuba", "#d1,s,t", 0x7C000013, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"msubau", "#d1,s,t", 0x7C000213, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"imsuba", "#d1,s,t", 0x7C000003, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"imsubau", "#d1,s,t", 0x7C000203, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmsuba", "#d1,s,t", 0x7C000403, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"msuba2", "#d2,s,t", 0x7C000053, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"imsuba2", "#d2,s,t", 0x7C000043, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmsuba2", "#d2,s,t", 0x7C000443, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"msuba2.s", "#d2,s,t", 0x7C0000D3, 0xFC0007FF, RD_3 | RD_2, 0, RAD1, 0, 0},
+//{"imsuba2.s32", "#d2,s,t", 0x7C0000C3, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmsuba2.s32", "#d2,s,t", 0x7C0004C3, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"imsuba2.s40", "#d2,s,t", 0x7C0001C3, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"qmsuba2.s40", "#d2,s,t", 0x7C0005C3, 0xFC0007FF, RD_3 | RD_2, 0, RAD2, 0, 0},
+//{"addma", "#d3,#s3,#t3", 0x7C00001E, 0xFC0007FF, 0, 0, RAD1, 0, 0},
+//{"addma.s", "#d3,#s3,#t3", 0x7C00009E, 0xFC0007FF, 0, 0, RAD1, 0, 0},
+//{"addma.s32", "#d3,#s3,#t3", 0x7C00041E, 0xFC0007FF, 0, 0, RAD2, 0, 0},
+//{"addma.s40", "#d3,#s3,#t3", 0x7C00049E, 0xFC0007FF, 0, 0, RAD2, 0, 0},
+//{"subma", "#d3,#s3,#t3", 0x7C00001F, 0xFC0007FF, 0, 0, RAD1, 0, 0},
+//{"subma.s", "#d3,#s3,#t3", 0x7C00009F, 0xFC0007FF, 0, 0, RAD1, 0, 0},
+//{"subma.s32", "#d3,#s3,#t3", 0x7C00041F, 0xFC0007FF, 0, 0, RAD2, 0, 0},
+//{"subma.s40", "#d3,#s3,#t3", 0x7C00049F, 0xFC0007FF, 0, 0, RAD2, 0, 0},
+//{"rnda2", "#t2", 0x7C000056, 0xFFE0FFFF, 0, 0, RAD1, 0, 0},
+//{"rnda2", "#t2,##", 0x7C000056, 0xFFE0F87F, 0, 0, RAD1, 0, 0},
+//{"lt", "#`,#@(b)", 0x7C000036, 0xFC00003F, LM | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"st", "#`,#@(b)", 0x7C00003E, 0xFC00003F, SM | RD_2 | RD_1, 0, RAD1, 0, 0},
+//{"ltp", "#`,(b)#~", 0x7C0000f2, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"ltp.c0", "#`,(b)#~", 0x7C000032, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"ltp.c1", "#`,(b)#~", 0x7C000072, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"ltp.c2", "#`,(b)#~", 0x7C0000b2, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lwp", "t,(b)#~", 0x7C0000f3, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lwp.c0", "t,(b)#~", 0x7C000033, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lwp.c1", "t,(b)#~", 0x7C000073, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lwp.c2", "t,(b)#~", 0x7C0000b3, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lhp", "t,(b)#~", 0x7C0000f1, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lhp.c0", "t,(b)#~", 0x7C000031, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lhp.c1", "t,(b)#~", 0x7C000071, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lhp.c2", "t,(b)#~", 0x7C0000b1, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lhpu", "t,(b)#~", 0x7C0000f5, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lhpu.c0", "t,(b)#~", 0x7C000035, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lhpu.c1", "t,(b)#~", 0x7C000075, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lhpu.c2", "t,(b)#~", 0x7C0000b5, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lbp", "t,(b)#~", 0x7C0000f0, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lbp.c0", "t,(b)#~", 0x7C000030, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lbp.c1", "t,(b)#~", 0x7C000070, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lbp.c2", "t,(b)#~", 0x7C0000b0, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lbpu", "t,(b)#~", 0x7C0000f4, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lbpu.c0", "t,(b)#~", 0x7C000034, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lbpu.c1", "t,(b)#~", 0x7C000074, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"lbpu.c2", "t,(b)#~", 0x7C0000b4, 0xFC0000FF, LM | WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"stp", "#`,(b)#~", 0x7C0000fa, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"stp.c0", "#`,(b)#~", 0x7C00003a, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"stp.c1", "#`,(b)#~", 0x7C00007a, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"stp.c2", "#`,(b)#~", 0x7C0000ba, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"swp", "t,(b)#~", 0x7C0000fb, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"swp.c0", "t,(b)#~", 0x7C00003b, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"swp.c1", "t,(b)#~", 0x7C00007b, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"swp.c2", "t,(b)#~", 0x7C0000bb, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"shp", "t,(b)#~", 0x7C0000f9, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"shp.c0", "t,(b)#~", 0x7C000039, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"shp.c1", "t,(b)#~", 0x7C000079, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"shp.c2", "t,(b)#~", 0x7C0000b9, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"sbp", "t,(b)#~", 0x7C0000f8, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"sbp.c0", "t,(b)#~", 0x7C000038, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"sbp.c1", "t,(b)#~", 0x7C000078, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"sbp.c2", "t,(b)#~", 0x7C0000b8, 0xFC0000FF, WR_1 | RD_2, 0, RAD1, 0, 0},
+//{"mtru", "t,#u", 0x7C000025, 0xFFE007FF, RD_1, 0, RAD1, 0, 0},
+//{"mfru", "t,#u", 0x7C000024, 0xFFE007FF, RD_1, 0, RAD1, 0, 0},
+//{"mtrk", "t,#k", 0x7C0000A5, 0xFFE007FF, RD_1, 0, RAD1, 0, 0},
+//{"mfrk", "t,#k", 0x7C0000A4, 0xFFE007FF, RD_1, 0, RAD1, 0, 0},
+//{"sllv2", "d,t,s", 0x7C000044, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"srlv2", "d,t,s", 0x7C000046, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"srav2", "d,t,s", 0x7C000047, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"addr", "d,s,t", 0x7C000021, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"addr.s", "d,s,t", 0x7C0000A1, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"addr2", "d,s,t", 0x7C000061, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"addr2.s", "d,s,t", 0x7C0000E1, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"subr", "d,s,t", 0x7C000023, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"subr.s", "d,s,t", 0x7C0000A3, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"subr2", "d,s,t", 0x7C000063, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"subr2.s", "d,s,t", 0x7C0000E3, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"sltr2", "d,s,t", 0x7C00006A, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"min", "d,s,t", 0x7C000028, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"min2", "d,s,t", 0x7C000068, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"max", "d,s,t", 0x7C000029, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"max2", "d,s,t", 0x7C000069, 0xFC0007FF, RD_3 | RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"absr", "d,t", 0x7C00000F, 0xFFE007FF, RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"absr.s", "d,t", 0x7C00008F, 0xFFE007FF, RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"absr2", "d,t", 0x7C00004F, 0xFFE007FF, RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"absr2.s", "d,t", 0x7C0000CF, 0xFFE007FF, RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"mux2.hh", "d,s,t", 0x7C00064D, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"mux2.hl", "d,s,t", 0x7C00044D, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"mux2.lh", "d,s,t", 0x7C00024D, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"mux2.ll", "d,s,t", 0x7C00004D, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"cls", "d,t", 0x7C00000E, 0xFFE007FF, RD_2 | WR_1, 0, RAD1, 0, 0},
+//{"cmveqz", "d,s,t", 0x7C000001, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"cmveqz.h", "d,s,t", 0x7C000081, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"cmveqz.l", "d,s,t", 0x7C000101, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"cmvnez", "d,s,t", 0x7C000041, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"cmvnez.h", "d,s,t", 0x7C0000c1, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+//{"cmvnez.l", "d,s,t", 0x7C000141, 0xFC0007FF, RD_2 | RD_3 | WR_1, 0, RAD1, 0, 0},
+
+
+/* Coprocessor 0 operations */
+{"mflxc0", "t,G", 0x40600000, 0xFFE007FF, LC | WR_1 | RD_C0, 0, RLXB, 0, 0},
+{"mflxc0", "t,G,H", 0x40600000, 0xFFE007F8, LC | WR_1 | RD_C0, 0, RLX3, 0, 0},
+{"mtlxc0", "t,G", 0x40E00000, 0xFFE007FF, CM | RD_1 | WR_C0 | WR_CC, 0, RLXB, 0, 0},
+{"mtlxc0", "t,G,H", 0x40E00000, 0xFFE007F8, CM | RD_1 | WR_C0 | WR_CC, 0, RLX3, 0, 0},
+/*MAC-DIV*/
+//{"sleep", "", 0x42000038, 0xffffffff, 0, 0, RLXA, 0, 0},
+//{"sleep", "#I", 0x42000038, 0xfffff83f, 0, 0, RLX3, 0, 0},
+//{"madh", "s,t", 0xF0000000, 0xFC00FFFF, RD_1 | RD_2, 0, RLXA, 0, 0},
+//{"madl", "s,t", 0xF0000002, 0xFC00FFFF, RD_1 | RD_2, 0, RLXA, 0, 0},
+//{"mazh", "s,t", 0xF0000004, 0xFC00FFFF, RD_1 | RD_2, 0, RLXA, 0, 0},
+//{"mazl", "s,t", 0xF0000006, 0xFC00FFFF, RD_1 | RD_2, 0, RLXA, 0, 0},
+//{"msbh", "s,t", 0xF0000010, 0xFC00FFFF, RD_1 | RD_2, 0, RLXA, 0, 0},
+//{"msbl", "s,t", 0xF0000012, 0xFC00FFFF, RD_1 | RD_2, 0, RLXA, 0, 0},
+//{"mszh", "s,t", 0xF0000014, 0xFC00FFFF, RD_1 | RD_2, 0, RLXA, 0, 0},
+//{"mszl", "s,t", 0xF0000016, 0xFC00FFFF, RD_1 | RD_2, 0, RLXA, 0, 0},
+//{"ltw", "#`,#-(b)", 0x7800003C, 0xFC00003F, LM | RD_2 | WR_1, 0, INSN_4181 | INSN_4281, 0, 0},
+/* Lexra opcode extensions. Register mode */
+/* Lexra opcode extensions. Immediate mode */
+//{"udi0i", "t,r,j", 0x60000000, 0xfc000000, WR_1 | RD_2, 0, RLXB, 0, 0},
+//{"udi1i", "t,r,j", 0x64000000, 0xfc000000, WR_1 | RD_2, 0, RLXB, 0, 0},
+//{"udi2i", "t,r,j", 0x68000000, 0xfc000000, WR_1 | RD_2, 0, RLXB, 0, 0},
+//{"udi3i", "t,r,j", 0x6c000000, 0xfc000000, WR_1 | RD_2, 0, RLXB, 0, 0},/* RFE conflicts with the new Virt spec instruction tlbgp. */
 {"rfe",			"",		0x42000010, 0xffffffff,	0,			0,		I1|T3,		0,	0 },
 };
 
