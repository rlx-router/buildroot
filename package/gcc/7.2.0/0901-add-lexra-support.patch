
--- a/gcc/config/mips/mips.c
+++ b/gcc/config/mips/mips.c
@@ -7986,6 +7986,8 @@ mips_block_move_straight (rtx dest, rtx
       if (MEM_ALIGN (src) == BITS_PER_WORD / 2
 	  && MEM_ALIGN (dest) == BITS_PER_WORD / 2)
 	bits = BITS_PER_WORD / 2;
+      else if (TARGET_LEXRA || TARGET_RLX)
+  bits = MIN (MEM_ALIGN (src), MEM_ALIGN (dest));
       else
 	bits = BITS_PER_WORD;
     }
@@ -8361,6 +8363,8 @@ mips_expand_ext_as_unaligned_load (rtx d
     }
   else
     {
+      if (TARGET_LEXRA || TARGET_RLX)
+        return false;
       emit_insn (gen_mov_lwl (temp, src, left));
       emit_insn (gen_mov_lwr (dest, copy_rtx (src), right, temp));
     }
@@ -8404,6 +8408,8 @@ mips_expand_ins_as_unaligned_store (rtx
     }
   else
     {
+      if (TARGET_LEXRA || TARGET_RLX)
+        return false;
       emit_insn (gen_mov_swl (dest, src, left));
       emit_insn (gen_mov_swr (copy_rtx (dest), copy_rtx (src), right));
     }

--- a/gcc/config/mips/mips.opt
+++ b/gcc/config/mips/mips.opt
@@ -335,6 +335,10 @@ mpaired-single
 Target Report Mask(PAIRED_SINGLE_FLOAT)
 Use paired-single floating-point instructions.
 
+mlexra
+Target Report Mask(LEXRA)
+Do not use lwl/lwr/swl/swr instructions absent in Lexra chips
+
 mr10k-cache-barrier=
 Target Joined RejectNegative Enum(mips_r10k_cache_barrier_setting) Var(mips_r10k_cache_barrier) Init(R10K_CACHE_BARRIER_NONE)
 -mr10k-cache-barrier=SETTING	Specify when r10k cache barriers should be inserted.

--- a/gcc/config/mips/mips.md
+++ b/gcc/config/mips/mips.md
@@ -65,6 +65,12 @@
   sb1a
   sr71000
   xlr
+  lx4180
+  rlx4181
+  rlx4281
+  rlx5181
+  lx5280
+  rlx5281
   xlp
   p5600
   m5100
@@ -4339,7 +4345,7 @@
 	(unspec:GPR [(match_operand:BLK 1 "memory_operand" "m")
 		     (match_operand:QI 2 "memory_operand" "ZC")]
 		    UNSPEC_LOAD_LEFT))]
-  "!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
+  "!TARGET_MIPS16 && !TARGET_LEXRA && !TARGET_RLX && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
   "<load>l\t%0,%2"
   [(set_attr "move_type" "load")
    (set_attr "mode" "<MODE>")])
@@ -4350,7 +4356,7 @@
 		     (match_operand:QI 2 "memory_operand" "ZC")
 		     (match_operand:GPR 3 "register_operand" "0")]
 		    UNSPEC_LOAD_RIGHT))]
-  "!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
+  "!TARGET_MIPS16 && !TARGET_LEXRA && !TARGET_RLX && mips_mem_fits_mode_p (<MODE>mode, operands[1])"
   "<load>r\t%0,%2"
   [(set_attr "move_type" "load")
    (set_attr "mode" "<MODE>")])
@@ -4360,7 +4366,7 @@
 	(unspec:BLK [(match_operand:GPR 1 "reg_or_0_operand" "dJ")
 		     (match_operand:QI 2 "memory_operand" "ZC")]
 		    UNSPEC_STORE_LEFT))]
-  "!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[0])"
+  "!TARGET_MIPS16 && !TARGET_LEXRA && !TARGET_RLX && mips_mem_fits_mode_p (<MODE>mode, operands[0])"
   "<store>l\t%z1,%2"
   [(set_attr "move_type" "store")
    (set_attr "mode" "<MODE>")])
@@ -4371,7 +4377,7 @@
 		     (match_operand:QI 2 "memory_operand" "ZC")
 		     (match_dup 0)]
 		    UNSPEC_STORE_RIGHT))]
-  "!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[0])"
+  "!TARGET_MIPS16 && !TARGET_LEXRA && !TARGET_RLX && mips_mem_fits_mode_p (<MODE>mode, operands[0])"
   "<store>r\t%z1,%2"
   [(set_attr "move_type" "store")
    (set_attr "mode" "<MODE>")])

--- a/gcc/config/mips/mips.h
+++ b/gcc/config/mips/mips.h
@@ -271,6 +271,15 @@ struct mips_cpu_info {
 #define TARGET_MIPS4000             (mips_arch == PROCESSOR_R4000)
 #define TARGET_MIPS4120             (mips_arch == PROCESSOR_R4120)
 #define TARGET_MIPS4130             (mips_arch == PROCESSOR_R4130)
+#define TARGET_MIPS4180        (mips_arch == PROCESSOR_LX4180)
+#define TARGET_MIPS4181        (mips_arch == PROCESSOR_RLX4181)
+#define TARGET_MIPS4281        (mips_arch == PROCESSOR_RLX4281)
+#define TARGET_MIPS5181        (mips_arch == PROCESSOR_RLX5181)
+#define TARGET_MIPS5280        (mips_arch == PROCESSOR_LX5280)
+#define TARGET_MIPS5281        (mips_arch == PROCESSOR_RLX5281)
+#define TARGET_RLX       (TARGET_MIPS4180 || TARGET_MIPS4181 || \
+         TARGET_MIPS4281 || TARGET_MIPS4181 || \
+         TARGET_MIPS5280 || TARGET_MIPS5281)
 #define TARGET_MIPS5400             (mips_arch == PROCESSOR_R5400)
 #define TARGET_MIPS5500             (mips_arch == PROCESSOR_R5500)
 #define TARGET_MIPS5900             (mips_arch == PROCESSOR_R5900)
@@ -299,12 +308,21 @@ struct mips_cpu_info {
 #define TUNE_LOONGSON_2EF           (mips_tune == PROCESSOR_LOONGSON_2E	\
 				     || mips_tune == PROCESSOR_LOONGSON_2F)
 #define TUNE_LOONGSON_3A            (mips_tune == PROCESSOR_LOONGSON_3A)
-#define TUNE_MIPS3000               (mips_tune == PROCESSOR_R3000)
+#define TUNE_MIPS3000               ((mips_tune == PROCESSOR_R3000) || TUNE_RLX)
 #define TUNE_MIPS3900               (mips_tune == PROCESSOR_R3900)
 #define TUNE_MIPS4000               (mips_tune == PROCESSOR_R4000)
 #define TUNE_MIPS4120               (mips_tune == PROCESSOR_R4120)
 #define TUNE_MIPS4130               (mips_tune == PROCESSOR_R4130)
+#define TUNE_MIPS4180        (mips_tune == PROCESSOR_LX4180)
+#define TUNE_MIPS4181        (mips_tune == PROCESSOR_RLX4181)
+#define TUNE_MIPS4281        (mips_tune == PROCESSOR_RLX4281)
 #define TUNE_MIPS5000               (mips_tune == PROCESSOR_R5000)
+#define TUNE_MIPS5181        (mips_tune == PROCESSOR_RLX5181)
+#define TUNE_MIPS5280        (mips_tune == PROCESSOR_LX5280)
+#define TUNE_MIPS5281        (mips_tune == PROCESSOR_RLX5281)
+#define TUNE_RLX       (TUNE_MIPS4180 || TUNE_MIPS4181 || \
+         TUNE_MIPS4281 || TUNE_MIPS4181 || \
+         TUNE_MIPS5280 || TUNE_MIPS5281)
 #define TUNE_MIPS5400               (mips_tune == PROCESSOR_R5400)
 #define TUNE_MIPS5500               (mips_tune == PROCESSOR_R5500)
 #define TUNE_MIPS6000               (mips_tune == PROCESSOR_R6000)

--- a/gcc/config/mips/mips-cpus.def
+++ b/gcc/config/mips/mips-cpus.def
@@ -59,6 +59,12 @@ MIPS_CPU ("mips64r6", PROCESSOR_I6400, 6
 MIPS_CPU ("r3000", PROCESSOR_R3000, 1, 0)
 MIPS_CPU ("r2000", PROCESSOR_R3000, 1, 0)
 MIPS_CPU ("r3900", PROCESSOR_R3900, 1, 0)
+MIPS_CPU ("lx4180", PROCESSOR_LX4180, 1, 0)
+MIPS_CPU ("rlx4181", PROCESSOR_RLX4181, 1, 0)
+MIPS_CPU ("rlx4281", PROCESSOR_RLX4281, 1, 0)
+MIPS_CPU ("rlx5181", PROCESSOR_RLX5181, 1, 0)
+MIPS_CPU ("lx5280", PROCESSOR_LX5280, 1, 0)
+MIPS_CPU ("rlx5281", PROCESSOR_RLX5281, 1, 0)
 
 /* MIPS II processors.  */
 MIPS_CPU ("r6000", PROCESSOR_R6000, 2, 0)
